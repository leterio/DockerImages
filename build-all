#!/usr/bin/env bash

# Author: Vinícius Letério <viniciusleterio@gmail.com>
# Objective: Invoke build-image for every image on this repository
# Version:   3.0

command -v log-trace 2>/dev/null >/dev/null || function log-trace() { [[ ${LOG_TRACE:-0} -eq 1 ]] && echo -e "${0##/}: \033[36m$@\033[0m" || true; }
command -v log-info 2>/dev/null >/dev/null || function log-info() { echo -e "${0##/}: $@"; }
command -v log-success 2>/dev/null >/dev/null || function log-success() { echo -e "${0##/}: \033[32m$@\033[0m"; }
command -v log-warn 2>/dev/null >/dev/null || function log-warn() { echo -e "${0##/}: \033[33m$@\033[0m"; }
command -v log-error 2>/dev/null >/dev/null || function log-error() { echo -e "${0##/}: \033[31m$@\033[0m"; }

# Per project script to set environmento variables for build-image
function tryLoadBuildEnvSH() {
    local buildEnvSH="build-env.sh"
    local project="$1"

    if [[ -x "$buildEnvSH" ]]; then
        log-info "$buildEnvSH for project found. Invoking ..."
        . "$buildEnvSH"

        if [[ $? -ne 0 ]]; then
            log-error "$buildEnvSH failed. Skipping this project!"
            return 1
        fi
    fi
}

# Build a single image
function buildImageSingle() {
    local project="$1"
    cd "$project"
    log-info "Building project: $project"
    tryLoadBuildEnvSH "$project" || return 1
    ../build-image -Lp .
}

[[ -x .env ]] && source .env

for project in $(find . -maxdepth 2 -type f -iname dockerfile | sed 's#\.\/\(.*\)\/dockerfile#\1#gI'); do
    (buildImageSingle "$project") && log-success "Successfull build for project $project" || log-error "Build failed for project $project"
done
